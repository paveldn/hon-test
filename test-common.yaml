api:
  reboot_timeout: 0s
  services:
    - service: send_custom_message
      variables:
        message_type: int
        message_data: int[]
      then:
        - lambda: |-
            if ((message_type < 0) || (message_type > 255)) {
              ESP_LOGE("send_custom_command", "Wrong custom message type (should be byte)");
              return;  
            }
            if (message_data.size() == 0) {
              ((HaierTestDevice*)(id(${device_id}).get_component(0)))->send_message(haier_protocol::HaierMessage((haier_protocol::FrameType) message_type));
            } else {
              size_t sz = message_data.size();
              std::unique_ptr<uint8_t[]> msg_buffer(new uint8_t [sz]); 
              for (unsigned int i = 0; i < sz; i++)
                msg_buffer[i] = message_data[i];
              ((HaierTestDevice*)(id(${device_id}).get_component(0)))->send_message(haier_protocol::HaierMessage((haier_protocol::FrameType) message_type, msg_buffer.get(), sz));
            }

ota:

web_server:

logger:
  level: DEBUG

custom_component:
  - id: ${device_id}
    lambda: return  { new HaierTestDevice(id(${uart_id})) };

button:
  - platform: template
    name: "1. Get device version (0x61)"
    on_press:
      then:
        - lambda: |-
            uint8_t msg_buffer[2] = {0b00000000, 0b00000111};
            ((HaierTestDevice*)(id(${device_id}).get_component(0)))->send_message(haier_protocol::HaierMessage(haier_protocol::FrameType::GET_DEVICE_VERSION, msg_buffer, sizeof(msg_buffer)), false);
  - platform: template
    name: "2. Get device ID (0x70)"
    on_press:
      then:
        - lambda: ((HaierTestDevice*)(id(${device_id}).get_component(0)))->send_message(haier_protocol::HaierMessage(haier_protocol::FrameType::GET_DEVICE_ID));
  - platform: template
    name: "3. Get alarm status (0x73)"
    on_press:
      then:
        - lambda: ((HaierTestDevice*)(id(${device_id}).get_component(0)))->send_message(haier_protocol::HaierMessage(haier_protocol::FrameType::GET_ALARM_STATUS));
  - platform: template
    name: "4 Get status (0x01)"
    on_press:
      then:
        - lambda: ((HaierTestDevice*)(id(${device_id}).get_component(0)))->send_message(haier_protocol::HaierMessage(haier_protocol::FrameType::CONTROL, 0x4D01));
  - platform: template
    name: "5. Get big data (0x01)"
    on_press:
      then:
        - lambda: ((HaierTestDevice*)(id(${device_id}).get_component(0)))->send_message(haier_protocol::HaierMessage(haier_protocol::FrameType::CONTROL, 0x4DFE));
  - platform: template
    name: "6. Get managment information (0xFC)"
    on_press:
      then:
        - lambda: ((HaierTestDevice*)(id(${device_id}).get_component(0)))->send_message(haier_protocol::HaierMessage(haier_protocol::FrameType::GET_MANAGEMENT_INFORMATION));
  - platform: template
    name: "7. Report network status (0xF7)"
    on_press:
      then:
        - lambda: |-
            static uint8_t wifi_status_data[4] = {0x00, 0x00, 0x00, 0x00};
            if (wifi::global_wifi_component->is_connected()) {
              wifi_status_data[1] = 0;
              int8_t rssi = wifi::global_wifi_component->wifi_rssi();
              wifi_status_data[3] = uint8_t((128 + rssi) / 1.28f);
              ESP_LOGD("haier-test", "WiFi signal is: %ddBm => %d%%", rssi, wifi_status_data[3]);
            } else {
              ESP_LOGD("haier-test", "WiFi is not connected");
              wifi_status_data[1] = 1;
              wifi_status_data[3] = 0;
            }
            auto message = haier_protocol::HaierMessage(haier_protocol::FrameType::REPORT_NETWORK_STATUS, wifi_status_data, sizeof(wifi_status_data));
            ((HaierTestDevice*)(id(${device_id}).get_component(0)))->send_message(message);

